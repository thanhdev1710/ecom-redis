import { redis } from "../redis";
import CatchAsync from "../utils/CatchAsync";

/**
 * üì¶ L·∫•y danh s√°ch danh m·ª•c (categories)
 *  - D√≤ to√†n b·ªô key ecom:cat:*:products
 *  - Tr·∫£ v·ªÅ m·∫£ng [{ id, name, productCount }]
 */
export const getCategories = CatchAsync(async (req, res) => {
  // ‚ö†Ô∏è L∆∞u √Ω: KEYS kh√¥ng t·ªëi ∆∞u tr√™n Redis l·ªõn
  // => N·∫øu h·ªá th·ªëng c√≥ nhi·ªÅu d·ªØ li·ªáu, d√πng SCAN thay cho KEYS
  const keys = await redis.keys("ecom:cat:*:products");

  const categories = await Promise.all(
    keys.map(async (k) => {
      const parts = k.split(":"); // ["ecom","cat","tee","products"]
      const catId = parts[2];
      const productCount = await redis.scard(k); // ƒê·∫øm s·∫£n ph·∫©m trong danh m·ª•c
      return {
        id: catId,
        name: mapCategory(catId),
        key: k,
        productCount,
      };
    })
  );

  res.json({ ok: true, total: categories.length, categories });
});

/** üè∑Ô∏è Map ID sang t√™n ti·∫øng Vi·ªát hi·ªÉn th·ªã */
function mapCategory(catId: string) {
  const dict: Record<string, string> = {
    tee: "√Åo thun",
    shirt: "√Åo s∆° mi",
    jean: "Qu·∫ßn jean",
    hoodie: "Hoodie",
    jacket: "√Åo kho√°c",
    sweater: "√Åo len",
    trousers: "Qu·∫ßn t√¢y",
    sneakers: "Gi√†y sneakers",
  };
  // Chu·∫©n ho√° ch·ªØ th∆∞·ªùng + fallback ch√≠nh n√≥ n·∫øu ch∆∞a map
  const norm = catId?.toLowerCase();
  return dict[norm] || norm || "Kh√°c";
}
